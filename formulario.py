# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app_main_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""

Equipo Azul Gpo 41 LTI


"""
"""

Importamos los modulos necesarios para la correcta ejecución del programa.

"""
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDir
import actualizar_rc_rc
import editar_rc
import eliminar_rc
import guardar_rc
import pdf_rc
import reload_rc
import search_rc
import mysql.connector
from PyQt5 import QtCore, QtGui, QtWidgets,QtPrintSupport,Qt
from PyQt5.QtWidgets import QFileDialog



import subprocess
#variable de tipo global para usarla como condición, para que a la hora de editar algo, se terminé de hacer y no haya
#errores
global editar
#le damos el valor False, si esta en False quiere decir que no se ha usado el método editar
editar = False
#función que muestra un mensaje en caja
#cambiar el contenido de la variable segun la base de datos
bd = "alumnos"

bd_mexico = "uanl4"
def showMessage(titulo, texto):
    # instanciamos un QMessageBox
    msg = QtWidgets.QMessageBox()
    #le definimos su icono
    msg.setIcon(QtWidgets.QMessageBox.Information)
    # le damos titulo
    msg.setWindowTitle(titulo)
    # le damos texto
    msg.setText(texto)
    # lo personalizamos
    msg.setStyleSheet(
        "QMessageBox{background-color:black;}QMessageBox QLabel {color:white;}QMessageBox QPushButton{background-color: white;color:black}")
    msg.setFont(QtGui.QFont('Trebuchet MS', 12))
    #lo ejecutamos
    msg.exec_()


def showdialog(titulo, text):
    # instanciamos un QMessageBox
    msg = QtWidgets.QMessageBox()
    # le definimos un icono
    msg.setIcon(QtWidgets.QMessageBox.Information)
    #le definimos su texto
    msg.setText(text)
    #le definimo su titulo
    msg.setWindowTitle(titulo)
    #definimos sus botones
    msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
    #lo personalizamos
    msg.setStyleSheet(
        "QMessageBox{background-color:black;}QMessageBox QLabel {color:white;}QMessageBox QPushButton{background-color: white;color:black}")
    msg.setFont(QtGui.QFont('Trebuchet MS', 12))
    #definimos su tamaño
    msg.setMinimumSize(200, 300)
    msg.setMaximumSize(200, 300)
    #guardamos la ejecución de este y los valores que elija el usuario segun la opcion que elija en una variable
    retval = msg.exec_()
    #retornamos la variable con los valores de respuesta
    return retval
"""

Cambiar parametros de conexión!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

"""
#es necesario cambiar los parametros host,user,password y database para una correcta ejecución
#funcion que crea una base de datos
def crearBaseDatos(db):
    try:
        my_connection = mysql.connector.connect(host="localhost",
                                                user="root",
                                                password="susana15_A")
        cursor = my_connection.cursor()
        cursor.execute(f"CREATE DATABASE {db};")
        cursor.execute(f"Use {db};")
        cursor.execute(f"CREATE TABLE reg_alumnos (matricula INT Primary key,"
                       f"nombre VARCHAR(30),"
                       f"ap_paterno VARCHAR(30),"
                       f"ap_materno VARCHAR(30),"
                       f"edad TINYINT,"
                       f"carrera VARCHAR(40),"
                       f"estado VARCHAR(30),"
                       f"municipio VARCHAR(30),"
                       f"domicilio VARCHAR(50),"
                       f"porcentaje TINYINT,"
                       f"materias_favoritas VARCHAR(50));")
        my_connection.close()
    except mysql.connector.errors.ProgrammingError:
        error = showMessage("Error","Tiene un error de sintaxis SQL")

    except mysql.connector.errors.DatabaseError:
        pass



#funcion que conecta con la base de datos
def conectar(db):
    try:
        my_db = mysql.connector.connect(host="localhost",
                                        user="root",
                                        password="susana15_A",
                                        database=db)
    except:
        texto = mysql.connector.Error
        _error = showMessage("Error", texto)
    else:
        print("Conexcion exitosa.")
        return my_db

#funcion que define un cursor
def _cursor(my_db):
    try:
        mycursor = my_db.cursor()
    except:
        texto = "Error al definir el cursor, asegurese de tener bien configurada la base de datos."
        showMessage("Error", texto)
    else:
        print("Cursor creado exitosamente.")
        return mycursor

#funcion que inserta registros en la base de datos
def insertar(db, cursor, matricula, nombre, paterno, materno, edad, carrera, estado, municipio, domicilio, porcentaje,
             materias):
    values = (matricula, nombre, paterno, materno, edad, carrera, estado, municipio, domicilio, porcentaje, materias)
    sql = "INSERT INTO REG_ALUMNOS VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
    try:
        cursor.execute(sql, values)
        db.commit()
    except:
        _error = "Error al insertar el registro, asegurese de tener bien configurada la base de datos."
        showMessage("ERROR", f"{_error}")
    else:

        # mandamos mensaje de exito
        mensaje = "SE HA INSERTADO EL REGISTRO CORRECTAMENTE."
        _done = showMessage("HECHO", f"{mensaje}")
#funcion que desconecta de la base de datos
def desconectar(my_db):
    try:
        my_db.close()
    except:
        texto=mysql.connector.Error
        _error = showMessage("Error",texto)
    else:
        print("Desconectado.")

#funcion que consulta la informacion de un alumno en base a su matricula
def consultar_matricula(cursor, matricula):
    values = (matricula,)
    sql = "SELECT * FROM REG_ALUMNOS WHERE MATRICULA = %s"
    try:
        cursor.execute(sql, values)
        resultados = cursor.fetchall()
    except :
        mensaje = "Nada que Consultar.\nAsegurese de tener configurada correctamente la base de datos."
        showMessage("Error con la base de datos.",mensaje)
    else:
        return resultados
#funcion que consulta todos los registros de la base de datos
def consultar_todos(cursor):
    try:
        cursor.execute("""SELECT MATRICULA,NOMBRE,AP_PATERNO,AP_MATERNO,EDAD,CARRERA,ESTADO,MUNICIPIO,DOMICILIO,PORCENTAJE,MATERIAS_FAVORITAS 
                        FROM REG_ALUMNOS""")
        alumnos= cursor.fetchall()
    except mysql.connector.DatabaseError:
        texto = "Error al intentar llenar la tabla, asegurese de tener bien configurada la base de datos."
        showMessage("Error", texto)
    else:
        return alumnos
#funcion que elimina a un alumno/registros en base a su matricula
def eliminar_alumno(db,cursor,matricula):
    try:

        sql = "DELETE FROM REG_ALUMNOS WHERE MATRICULA = %s;"
        values = (matricula,)
        cursor.execute(sql,values)
    except mysql.connector.errors.OperationalError:
        mensaje = "Asegurese de tener configurada correctamente la base de datos."
        showMessage("Error con la base de datos.")
    else:
        db.commit()



class Ui_RegistroAlumnos(object):
    def setupUi(self, RegistroAlumnos):
        """
        Codigo generado por pyqt5 designer, se agregaron algunos comentarios en esta parte a partir de la línea 321
        """
        RegistroAlumnos.setObjectName("RegistroAlumnos")
        RegistroAlumnos.resize(1850, 870)
        RegistroAlumnos.setMinimumSize(QtCore.QSize(1850, 870))
        RegistroAlumnos.setMaximumSize(QtCore.QSize(1850, 870))
        RegistroAlumnos.setStyleSheet("background-color: rgb(0, 0, 0);\n"
                                      "alternate-background-color: rgb(255, 255, 255);")
        self.widget_principal = QtWidgets.QWidget(RegistroAlumnos)
        self.widget_principal.setObjectName("widget_principal")
        self.formLayoutWidget = QtWidgets.QWidget(self.widget_principal)
        self.formLayoutWidget.setGeometry(QtCore.QRect(40, 120, 774, 453))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.lyt_form_alumno = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.lyt_form_alumno.setContentsMargins(0, 0, 0, 0)
        self.lyt_form_alumno.setObjectName("lyt_form_alumno")
        """
        
        MAtricula
        
        """
        self.lbl_matricula = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_matricula.setFont(font)
        self.lbl_matricula.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_matricula.setObjectName("lbl_matricula")
        self.lyt_form_alumno.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.lbl_matricula)
        self.ipt_matricula = QtWidgets.QSpinBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_matricula.setFont(font)
        self.ipt_matricula.setStyleSheet("color: rgb(0, 0, 0);\n"
                                         "background-color: rgb(255, 255, 255);")
        self.ipt_matricula.setMinimum(0)
        self.ipt_matricula.setMaximum(1999999)
        self.ipt_matricula.setProperty("value", 0)
        self.ipt_matricula.setObjectName("ipt_matricula")
        self.lyt_form_alumno.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.ipt_matricula)
        self.ipt_matricula.setFocus()

        """
        
        Nombre
        
        """
        self.lbl_name = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_name.setFont(font)
        self.lbl_name.setStyleSheet("\n"
                                    "color: rgb(255, 255, 255);")
        self.lbl_name.setObjectName("lbl_name")
        self.lyt_form_alumno.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.lbl_name)
        self.ipt_name = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_name.setFont(font)
        self.ipt_name.setStyleSheet("color: rgb(0, 0, 0);\n"
                                    "background-color: rgb(255, 255, 255);")
        self.ipt_name.setObjectName("ipt_name")
        self.lyt_form_alumno.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.ipt_name)

        """
        
        Apellido Paterno
        
        """

        self.lbl_ap_pat = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_ap_pat.setFont(font)
        self.lbl_ap_pat.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_ap_pat.setObjectName("lbl_ap_pat")
        self.lyt_form_alumno.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.lbl_ap_pat)
        self.ipt_ap_paterno = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_ap_paterno.setFont(font)
        self.ipt_ap_paterno.setStyleSheet("color: rgb(0, 0, 0);\n"
                                          "background-color: rgb(255, 255, 255);")
        self.ipt_ap_paterno.setObjectName("ipt_ap_paterno")
        self.lyt_form_alumno.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.ipt_ap_paterno)

        """
        
        Apellido Materno
        
        """

        self.lbl_ap_mat = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_ap_mat.setFont(font)
        self.lbl_ap_mat.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_ap_mat.setObjectName("lbl_ap_mat")
        self.lyt_form_alumno.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.lbl_ap_mat)
        self.ipt_ap_materno = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_ap_materno.setFont(font)
        self.ipt_ap_materno.setStyleSheet("color: rgb(0, 0, 0);\n"
                                          "background-color: rgb(255, 255, 255);")
        self.ipt_ap_materno.setObjectName("ipt_ap_materno")
        self.lyt_form_alumno.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.ipt_ap_materno)

        """
        
        Edad
        
        """


        self.lbl_edad = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_edad.setFont(font)
        self.lbl_edad.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_edad.setObjectName("lbl_edad")
        self.lyt_form_alumno.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.lbl_edad)
        self.ipt_edad = QtWidgets.QSpinBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_edad.setFont(font)
        self.ipt_edad.setStyleSheet("color: rgb(0, 0, 0);\n"
                                    "background-color: rgb(255, 255, 255);")
        self.ipt_edad.setMaximum(100)
        self.ipt_edad.setObjectName("ipt_edad")
        self.lyt_form_alumno.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.ipt_edad)
        """
        
        Estados

        """
        self.lbl_estado = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_estado.setFont(font)
        self.lbl_estado.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_estado.setObjectName("lbl_estado")
        self.lyt_form_alumno.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.lbl_estado)
        self.combo_box_estado = QtWidgets.QComboBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.combo_box_estado.setFont(font)
        self.combo_box_estado.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.combo_box_estado.setStyleSheet(
            "QListView{background-color: black;color:white;border: 1px solid #d0d0d0;}\n"
            "QComboBox{background-color: black;color:white;border: 1px solid #d0d0d0;}\n"
            "")
        self.combo_box_estado.setObjectName("combo_box_estado")
        self.combo_box_estado.addItem("")
        #evento que activa la busqueda de municipios en base al estado seleccionado en el combo box
        self.combo_box_estado.activated.connect(self.municipios)
        self.lyt_form_alumno.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.combo_box_estado)
        """

        Municipio

        """
        self.combo_box_municipio = QtWidgets.QComboBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.combo_box_municipio.setFont(font)
        self.combo_box_municipio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.combo_box_municipio.setStyleSheet(
            "QListView{background-color: black;color:white;border: 1px solid #d0d0d0;}\n"
            "QComboBox{background-color: black;color:white;border: 1px solid #d0d0d0;}\n"
            "")
        self.combo_box_municipio.setObjectName("combo_box_municipio")
        self.combo_box_municipio.addItem("")
        self.lyt_form_alumno.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.combo_box_municipio)
        self.lbl_municipio = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_municipio.setFont(font)
        self.lbl_municipio.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_municipio.setObjectName("lbl_municipio")
        self.lyt_form_alumno.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.lbl_municipio)

        """

        Domicilio

        """
        self.lbl_domicilio = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_domicilio.setFont(font)
        self.lbl_domicilio.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_domicilio.setObjectName("lbl_domicilio")
        self.lyt_form_alumno.setWidget(7, QtWidgets.QFormLayout.LabelRole, self.lbl_domicilio)
        self.ipt_domicilio = QtWidgets.QTextEdit(self.formLayoutWidget)
        self.ipt_domicilio.setMaximumSize(QtCore.QSize(16777215, 100))
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.ipt_domicilio.setFont(font)
        self.ipt_domicilio.setStyleSheet("color: rgb(0, 0, 0);\n"
                                         "background-color: rgb(255, 255, 255);")
        self.ipt_domicilio.setObjectName("ipt_domicilio")
        self.lyt_form_alumno.setWidget(7, QtWidgets.QFormLayout.FieldRole, self.ipt_domicilio)

        """
        
        Carrera
        
        """
        self.lbl_carrera = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_carrera.setFont(font)
        self.lbl_carrera.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_carrera.setObjectName("lbl_carrera")
        self.lyt_form_alumno.setWidget(8, QtWidgets.QFormLayout.LabelRole, self.lbl_carrera)
        self.combo_box_carrera = QtWidgets.QComboBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.combo_box_carrera.setFont(font)
        self.combo_box_carrera.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.combo_box_carrera.setStyleSheet(
            "QListView{background-color: black;color:white;border: 1px solid #d0d0d0;}\n"
            "QComboBox{background-color: black;color:white;border: 1px solid #d0d0d0;}\n"
            "")
        self.combo_box_carrera.setObjectName("combo_box_carrera")
        self.combo_box_carrera.addItem("")
        self.combo_box_carrera.addItem("")
        self.combo_box_carrera.addItem("")
        self.combo_box_carrera.addItem("")
        self.combo_box_carrera.addItem("")
        self.lyt_form_alumno.setWidget(8, QtWidgets.QFormLayout.FieldRole, self.combo_box_carrera)


        """

                Porcentaje

        """

        self.lbl_percent = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_percent.setFont(font)
        self.lbl_percent.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_percent.setObjectName("lbl_percent")
        self.lyt_form_alumno.setWidget(9, QtWidgets.QFormLayout.LabelRole, self.lbl_percent)
        self.lyt_porcentajes = QtWidgets.QHBoxLayout()
        self.lyt_porcentajes.setObjectName("lyt_porcentajes")
        self.rb_group = QtWidgets.QButtonGroup()
        self.rb_0 = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.rb_0.setFont(font)
        self.rb_0.setStyleSheet("color: rgb(255, 255, 255);\n"
                                "background-color: rgb(0, 0, 0);")
        self.rb_0.setObjectName("rb_0")
        self.lyt_porcentajes.addWidget(self.rb_0)
        self.rb_50 = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.rb_50.setFont(font)
        self.rb_50.setStyleSheet("color: rgb(255, 255, 255);\n"
                                 "background-color: rgb(0, 0, 0);")
        self.rb_50.setObjectName("rb_50")
        self.lyt_porcentajes.addWidget(self.rb_50)
        self.rb_80 = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.rb_80.setFont(font)
        self.rb_80.setStyleSheet("color: rgb(255, 255, 255);\n"
                                 "background-color: rgb(0, 0, 0);")
        self.rb_80.setObjectName("rb_80")
        self.lyt_porcentajes.addWidget(self.rb_80)
        self.rb_100 = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.rb_100.setFont(font)
        self.rb_100.setStyleSheet("color: rgb(255, 255, 255);\n"
                                  "background-color: rgb(0, 0, 0);")
        self.rb_100.setObjectName("rb_100")
        self.lyt_porcentajes.addWidget(self.rb_100)
        self.lyt_form_alumno.setLayout(9, QtWidgets.QFormLayout.FieldRole, self.lyt_porcentajes)
        self.rb_group.addButton(self.rb_0)
        self.rb_group.addButton(self.rb_50)
        self.rb_group.addButton(self.rb_80)
        self.rb_group.addButton(self.rb_100)

        """
        
        Materias
        
        """
        self.lbl_materias = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_materias.setFont(font)
        self.lbl_materias.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_materias.setObjectName("lbl_materias")
        self.lyt_form_alumno.setWidget(10, QtWidgets.QFormLayout.LabelRole, self.lbl_materias)
        self.lyt_materias = QtWidgets.QGridLayout()
        self.lyt_materias.setObjectName("lyt_materias")

        self.cb_io = QtWidgets.QCheckBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.cb_io.setFont(font)
        self.cb_io.setStyleSheet("color: rgb(255, 255, 255);")
        self.cb_io.setObjectName("cb_io")
        self.lyt_materias.addWidget(self.cb_io, 2, 1, 1, 1)
        self.cb_estadistica = QtWidgets.QCheckBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.cb_estadistica.setFont(font)
        self.cb_estadistica.setStyleSheet("color: rgb(255, 255, 255);")
        self.cb_estadistica.setObjectName("cb_estadistica")
        self.lyt_materias.addWidget(self.cb_estadistica, 0, 2, 1, 1)
        self.cb_conta = QtWidgets.QCheckBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.cb_conta.setFont(font)
        self.cb_conta.setStyleSheet("color: rgb(255, 255, 255);")
        self.cb_conta.setObjectName("cb_conta")
        self.lyt_materias.addWidget(self.cb_conta, 0, 1, 1, 1)
        self.cb_bd = QtWidgets.QCheckBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.cb_bd.setFont(font)
        self.cb_bd.setStyleSheet("color: rgb(255, 255, 255);")
        self.cb_bd.setObjectName("cb_bd")
        self.lyt_materias.addWidget(self.cb_bd, 2, 0, 1, 1)
        self.cb_progra = QtWidgets.QCheckBox(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.cb_progra.setFont(font)
        self.cb_progra.setStyleSheet("color: rgb(255, 255, 255);")
        self.cb_progra.setObjectName("cb_progra")
        self.lyt_materias.addWidget(self.cb_progra, 0, 0, 1, 1)
        self.lyt_form_alumno.setLayout(10, QtWidgets.QFormLayout.FieldRole, self.lyt_materias)


        """
        
        Tabla de datos
        
        """
        self.lbl_datos = QtWidgets.QLabel(self.widget_principal)
        self.lbl_datos.setGeometry(QtCore.QRect(220, 40, 471, 41))
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_datos.setFont(font)
        self.lbl_datos.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_datos.setObjectName("lbl_datos")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.widget_principal)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(840, 80, 991, 641))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.lyt_tabla = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.lyt_tabla.setContentsMargins(0, 0, 0, 0)
        self.lyt_tabla.setObjectName("lyt_tabla")
        self.tabla_datos_alumnos = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.tabla_datos_alumnos.setFont(font)
        self.tabla_datos_alumnos.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.tabla_datos_alumnos.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tabla_datos_alumnos.setObjectName("tabla_datos_alumnos")
        self.tabla_datos_alumnos.setColumnCount(11)
        self.tabla_datos_alumnos.setRowCount(0)
        """
        
        Items principales (Encabezados)
        
        """
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tabla_datos_alumnos.setHorizontalHeaderItem(11, item)
        self.lyt_tabla.addWidget(self.tabla_datos_alumnos)

        """

        Limpiar

         """
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.widget_principal)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(300, 570, 301, 81))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.lyt_insertar_limpiar = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.lyt_insertar_limpiar.setContentsMargins(0, 0, 0, 0)
        self.lyt_insertar_limpiar.setObjectName("lyt_insertar_limpiar")


        self.btn_clean = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btn_clean.setMaximumSize(QtCore.QSize(80, 70))
        self.btn_clean.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_clean.setStyleSheet("border-image: url(:/editar/icons8-borrar-96.png);")
        self.btn_clean.setText("")
        self.btn_clean.setObjectName("btn_clean")
        self.lyt_insertar_limpiar.addWidget(self.btn_clean)
        #conectamos el boton con el método clean()
        self.btn_clean.clicked.connect(self.clean)

        """
        
        Insertar
        
        """
        self.btn_insertar = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btn_insertar.setMaximumSize(QtCore.QSize(80, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btn_insertar.setFont(font)
        self.btn_insertar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_insertar.setStyleSheet("border-image: url(:/guardar/icons8-guardar-96.png);")
        self.btn_insertar.setText("")
        self.btn_insertar.setObjectName("btn_insertar")
        #conectamos el boton con el metodo guardar
        self.btn_insertar.clicked.connect(self.guardar)
        self.lyt_insertar_limpiar.addWidget(self.btn_insertar)


        """
        
        Buscar Por matricula
        
        """
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.widget_principal)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(1500, 30, 281, 41))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.lyt_search = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.lyt_search.setContentsMargins(0, 0, 0, 0)
        self.lyt_search.setObjectName("lyt_search")
        self.lbl_search_matricula = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_search_matricula.setFont(font)
        self.lbl_search_matricula.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_search_matricula.setObjectName("lbl_search_matricula")
        self.lyt_search.addWidget(self.lbl_search_matricula)
        self.ipt_search_matricula = QtWidgets.QSpinBox(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_search_matricula.setFont(font)
        self.ipt_search_matricula.setStyleSheet("color: rgb(0, 0, 0);\n"
                                                "background-color: rgb(255, 255, 255);")
        self.ipt_search_matricula.setMaximum(1999999)
        self.ipt_search_matricula.setObjectName("ipt_search_matricula")
        self.lyt_search.addWidget(self.ipt_search_matricula)
        self.btn_consultar = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btn_consultar.setMaximumSize(QtCore.QSize(50, 50))
        self.btn_consultar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_consultar.setStyleSheet("border-image: url(:/search/icons8-magnifying-glass-tilted-right-96.png);")
        self.btn_consultar.setText("")
        self.btn_consultar.setObjectName("btn_consultar")
        #conectamos el boton con el metodo consultar
        self.btn_consultar.clicked.connect(self.consultar)
        self.lyt_search.addWidget(self.btn_consultar)


        """
        
        Recargar
        
        """


        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.widget_principal)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(1030, 730, 671, 101))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.lyt_act_borrar_pdf = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.lyt_act_borrar_pdf.setContentsMargins(0, 0, 0, 0)
        self.lyt_act_borrar_pdf.setObjectName("lyt_act_borrar_pdf")
        self.btn_reload = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btn_reload.setMaximumSize(QtCore.QSize(80, 70))
        self.btn_reload.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_reload.setStyleSheet("border-image: url(:/reload/icons8-actualizar-80.png);")
        self.btn_reload.setText("")
        self.btn_reload.setObjectName("btn_reload")
        self.lyt_act_borrar_pdf.addWidget(self.btn_reload)
        #conectamos el boton con la funcion actualizar
        self.btn_reload.clicked.connect(self.actualizar)


        """
        
        Exportar
        
        """
        self.btn_exportar = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btn_exportar.setMaximumSize(QtCore.QSize(80, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btn_exportar.setFont(font)
        self.btn_exportar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_exportar.setStyleSheet("border-image: url(:/pdf/icons8-pdf-100.png);")
        self.btn_exportar.setText("")
        self.btn_exportar.setObjectName("btn_exportar")
        self.lyt_act_borrar_pdf.addWidget(self.btn_exportar)
        #conectamos el boton con la funcion exportar pdf
        self.btn_exportar.clicked.connect(self.exportar_pdf)

        """
        
        Editar 
        
        """

        self.btn_actualizar = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btn_actualizar.setMaximumSize(QtCore.QSize(80, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btn_actualizar.setFont(font)
        self.btn_actualizar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_actualizar.setStyleSheet("border-image: url(:/actualizar/icons8-editar-80.png);")
        self.btn_actualizar.setText("")
        self.btn_actualizar.setObjectName("btn_actualizar")
        self.btn_actualizar.clicked.connect(self.editar)
        #conectamos el botón con el método editar
        self.lyt_act_borrar_pdf.addWidget(self.btn_actualizar)



        """
        
        Eliminar
        
        """

        self.btn_eliminar = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btn_eliminar.setMaximumSize(QtCore.QSize(80, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btn_eliminar.setFont(font)
        self.btn_eliminar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_eliminar.setStyleSheet("border-image: url(:/eliminar/icons8-eliminar-128.png);")
        self.btn_eliminar.setText("")
        self.btn_eliminar.setObjectName("btn_eliminar")
        self.lyt_act_borrar_pdf.addWidget(self.btn_eliminar)

        #Conectamos el botón con el método eliminar()
        self.btn_eliminar.clicked.connect(self.eliminar)

        RegistroAlumnos.setCentralWidget(self.widget_principal)
        self.statusbar = QtWidgets.QStatusBar(RegistroAlumnos)
        self.statusbar.setObjectName("statusbar")
        RegistroAlumnos.setStatusBar(self.statusbar)
        self.retranslateUi(RegistroAlumnos)
        """
        
        Orden de salto del tab
        
        """
        QtCore.QMetaObject.connectSlotsByName(RegistroAlumnos)
        RegistroAlumnos.setTabOrder(self.ipt_matricula, self.ipt_name)
        RegistroAlumnos.setTabOrder(self.ipt_name, self.ipt_ap_paterno)
        RegistroAlumnos.setTabOrder(self.ipt_ap_paterno, self.ipt_ap_materno)
        RegistroAlumnos.setTabOrder(self.ipt_ap_materno, self.ipt_edad)
        RegistroAlumnos.setTabOrder(self.ipt_edad,self.combo_box_estado)
        RegistroAlumnos.setTabOrder(self.combo_box_estado, self.combo_box_municipio)
        RegistroAlumnos.setTabOrder(self.combo_box_municipio, self.ipt_domicilio)
        RegistroAlumnos.setTabOrder(self.ipt_domicilio, self.combo_box_carrera)
        RegistroAlumnos.setTabOrder(self.combo_box_carrera, self.rb_0)
        RegistroAlumnos.setTabOrder(self.rb_0, self.rb_50)
        RegistroAlumnos.setTabOrder(self.rb_50, self.rb_80)
        RegistroAlumnos.setTabOrder(self.rb_80, self.rb_100)
        RegistroAlumnos.setTabOrder(self.rb_100, self.cb_progra)
        RegistroAlumnos.setTabOrder(self.cb_progra, self.cb_conta)
        RegistroAlumnos.setTabOrder(self.cb_conta, self.cb_estadistica)
        RegistroAlumnos.setTabOrder(self.cb_estadistica, self.cb_bd)
        RegistroAlumnos.setTabOrder(self.cb_bd, self.cb_io)
        RegistroAlumnos.setTabOrder(self.cb_io, self.btn_clean)
        RegistroAlumnos.setTabOrder(self.btn_clean, self.btn_insertar)
        RegistroAlumnos.setTabOrder(self.btn_insertar, self.ipt_search_matricula)
        RegistroAlumnos.setTabOrder(self.ipt_search_matricula, self.btn_consultar)
        RegistroAlumnos.setTabOrder(self.btn_consultar, self.tabla_datos_alumnos)
        RegistroAlumnos.setTabOrder(self.tabla_datos_alumnos, self.btn_reload)
        RegistroAlumnos.setTabOrder(self.btn_reload, self.btn_exportar)
        RegistroAlumnos.setTabOrder(self.btn_exportar, self.btn_actualizar)
        RegistroAlumnos.setTabOrder(self.btn_actualizar, self.btn_eliminar)
    #metodo que traduce los textos de los componentes
    def retranslateUi(self, RegistroAlumnos):
        _translate = QtCore.QCoreApplication.translate
        RegistroAlumnos.setWindowTitle(
            _translate("RegistroAlumnos", "Registro, Actualizacion, Consulta y Eliminación de Alumnos"))
        self.lbl_name.setText(_translate("RegistroAlumnos", "NOMBRE"))
        self.lbl_ap_pat.setText(_translate("RegistroAlumnos", "APELLIDO PATERNO"))
        self.lbl_ap_mat.setText(_translate("RegistroAlumnos", "APELLIDO MATERNO"))
        self.lbl_matricula.setText(_translate("RegistroAlumnos", "MATRICULA"))
        self.lbl_edad.setText(_translate("RegistroAlumnos", "EDAD"))
        self.lbl_domicilio.setText(_translate("RegistroAlumnos", "DOMICILIO"))
        self.ipt_domicilio.setText("CALLE Y NÚMERO")
        self.lbl_carrera.setText(_translate("RegistroAlumnos", "CARRERA"))
        self.combo_box_carrera.setItemText(0, _translate("RegistroAlumnos", "ELIJA UNA CARRERA"))
        self.combo_box_carrera.setItemText(1, _translate("RegistroAlumnos", "LIC. EN TECNOLOGÍAS DE INFORMACIÓN"))
        self.combo_box_carrera.setItemText(2, _translate("RegistroAlumnos", "CONTADOR PÚBLICO Y AUDITOR"))
        self.combo_box_carrera.setItemText(3, _translate("RegistroAlumnos", "LIC. EN ADMINISTRACIÓN DE EMPRESAS"))
        self.combo_box_carrera.setItemText(4, _translate("RegistroAlumnos", "LIC. EN NEGOCIOS INTERNACIONALES"))
        self.combo_box_estado.setItemText(0, _translate("RegistroAlumnos", "ELIJA UN ESTADO"))


        """
        
        Aqui introdujimos código
        
        """
        # se conecta a la base de datos
        base = conectar(bd_mexico)
        # definimos cursor
        mycursor = _cursor(base)
        # intentamos una consulta
        # definimos un bloque de excepciones
        try:
            mycursor.execute("Select nombre from estados;")
            # guardamos los resultados de la consulta en una variable llamada estados
            estados = mycursor.fetchall()
        except:
            print("Error en la consulta")
        else:
            print("Consulta realizada con exito.")
            # recorremos el espacio en memoria estados
            for i in range(len(estados) + 1):
                # esta linea es para si el iterador es igual a 0 haga ninguna accion ya que ahi no pondremos texto
                # alguno
                if i == 0:
                    pass

                else:
                    # si no es igual a 0, se llenara el combobox con el estado, para esto accedemos al subitem 0 del
                    # item con el indice
                    # equivalente al valor del iterador - 1 y actualizamos el texto de la columna equivalente al valor
                    # del iterador.
                    self.combo_box_estado.addItem("")
                    self.combo_box_estado.setItemText(i, estados[i - 1][0].upper())
        # nos desconectamos de la base de datos
        desconectar(base)
        self.combo_box_municipio.setItemText(0, _translate("RegistroAlumnos", "ELIJA UN MUNICIPIO"))
        self.lbl_estado.setText(_translate("RegistroAlumnos", "ESTADO"))
        self.lbl_municipio.setText(_translate("RegistroAlumnos", "MUNICIPIO"))
        self.lbl_percent.setText(_translate("RegistroAlumnos", "PORCENTAJE BECA"))
        self.rb_0.setText(_translate("RegistroAlumnos", "0"))
        self.rb_50.setText(_translate("RegistroAlumnos", "50"))
        self.rb_80.setText(_translate("RegistroAlumnos", "80"))
        self.rb_100.setText(_translate("RegistroAlumnos", "100"))
        self.lbl_materias.setText(_translate("RegistroAlumnos", "MATERIAS FAVORITAS"))
        self.cb_io.setText(_translate("RegistroAlumnos", "INVESTIGACION DE OPERACIONES"))
        self.cb_estadistica.setText(_translate("RegistroAlumnos", "ESTADISTICA"))
        self.cb_conta.setText(_translate("RegistroAlumnos", "CONTABILIDAD"))
        self.cb_bd.setText(_translate("RegistroAlumnos", "BASE DE DATOS"))
        self.cb_progra.setText(_translate("RegistroAlumnos", "PROGRAMACION"))
        self.lbl_datos.setText(_translate("RegistroAlumnos", "DATOS DEL ALUMNO POR REGISTRAR"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(0)
        item.setText(_translate("RegistroAlumnos", "MATRICULA"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(1)
        item.setText(_translate("RegistroAlumnos", "NOMBRE"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(2)
        item.setText(_translate("RegistroAlumnos", "APELLIDO PATERNO"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(3)
        item.setText(_translate("RegistroAlumnos", "APELLIDO MATERNO"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(4)
        item.setText(_translate("RegistroAlumnos", "EDAD"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(5)
        item.setText(_translate("RegistroAlumnos", "CARRERA"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(6)
        item.setText(_translate("RegistroAlumnos", "ESTADO"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(7)
        item.setText(_translate("RegistroAlumnos", "MUNICIPIO"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(8)
        item.setText(_translate("RegistroAlumnos", "DOMICILIO"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(9)
        item.setText(_translate("RegistroAlumnos", "PORCENTAJE BECA"))
        item = self.tabla_datos_alumnos.horizontalHeaderItem(10)
        item.setText(_translate("RegistroAlumnos", "MATERIAS FAVORITAS"))
        self.lbl_search_matricula.setText(_translate("RegistroAlumnos", "MATRICULA"))

    #metodo para consultar municipios en base al estado seleccionado en el combo box de los estados
    def municipios(self):
        # definimos una lista llamada municipios
        _municipios = list()
        # limpiamos el combo box municipios para evitar que los items se acumulen
        self.combo_box_municipio.clear()
        # conectamos a la base de datos
        base = conectar(bd_mexico)
        # definimos un cursor
        mycursor = _cursor(base)
        # obtenemos el valor seleccionado
        estado = self.combo_box_estado.currentText()
        # definimos un bloque de excepciones
        try:
            # realizamos la consulta donde se busca el nombre de los municipios en base al nombre del estado
            mycursor.execute(
                f"Select municipios.nombre as 'Municipio' from municipios where municipios.estado_id = (Select id from estados where nombre = '{estado}' );")
            # guardamos los resultados de la consulta en la lista _municipios
            _municipios = mycursor.fetchall()
        except mysql.connector.Error as err:
            print(err)
        else:
            print("Consulta realizada con exito")
            # recorremos la lista municipios para añadir el item vacio y despues vaciar el municipio correspondiente.
        for i in range(len(_municipios)):
            self.combo_box_municipio.addItem("")
            self.combo_box_municipio.setItemText(i, _municipios[i][0].upper())

        # nos desconectamos de la base de datos.
        desconectar(base)

    # método para rellenar la tabla
    def fill_table(self):
        #conectamos a la base de datos
        db=conectar(bd)
        #definimos a un cursor
        cursor = _cursor(db)
        #guardarmos en un espacio de memoria los datos retornados de la funcion consultar_todos()
        alumnos = consultar_todos(cursor)
        #desconectamos de la base de datos
        desconectar(db)

        if alumnos != None:
            # recorremos los registros devueltos por la función consultar_todos
            for i in alumnos:
                # guardamos en una variable la posición de la fila en base a las filas
                rowPosition = self.tabla_datos_alumnos.rowCount()
                # insertamos una fila en base a la variable anterior
                self.tabla_datos_alumnos.insertRow(rowPosition)
                # obtenemos el numero de columnas
                numCols = self.tabla_datos_alumnos.columnCount()
                # obtenemos el numero de filas
                numRows = self.tabla_datos_alumnos.rowCount()
                # definimos el numero de filas
                self.tabla_datos_alumnos.setRowCount(numRows)
                # definimos el numero de columnas
                self.tabla_datos_alumnos.setColumnCount(numCols)
                # definimos una variable contadora
                c = 0
                # recorremos cada valor del elemento actual
                for y in i:
                    # si el contador es igual a 10, aqui se entra a un bloque de código especial
                    if c == 10:
                        # si el valor del elemento es diferente a la condición entonces
                        if y != "Ninguna Materia Favorita":
                            # se crea un combo box
                            combo_box = QtWidgets.QComboBox()
                            # instanciamos una variable
                            materia = ""
                            # recorremos el elemento, dependiendo el valor que tenga el elemento, se añade un valor al
                            # combo box
                            for numero in y:
                                if numero.strip() == "1":
                                    materia = "PROGRAMACION"
                                    combo_box.addItem(materia)
                                elif numero.strip() == "2":
                                    materia = "BASE DE DATOS"
                                    combo_box.addItem(materia)
                                elif numero.strip() == "3":
                                    materia = "CONTABILIDAD"
                                    combo_box.addItem(materia)
                                elif numero.strip() == "4":
                                    materia = "INVESTIGACION DE OPERACIONES"
                                    combo_box.addItem(materia)
                                elif numero.strip() == "5":
                                    materia = "ESTADISTICA"
                                    combo_box.addItem(materia)
                            # añadimos el combobox a la celda especificada
                            self.tabla_datos_alumnos.setCellWidget(numRows - 1, c, combo_box)
                        # si no lo es
                        else:
                            # añadimos un item en blanco
                            self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem())
                            # lo rellenamos
                            self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem(str(y)))
                            # en caso que la celda anterior sea igual a 100, coloreamos esta celda de verde
                            if self.tabla_datos_alumnos.item(numRows - 1, 9).text() == "100":
                                self.tabla_datos_alumnos.item(numRows - 1, c).setBackground(QtGui.QColor(191, 255, 0))
                            # se definen las banderas, es seleccionable pero no editable
                            flags = QtCore.Qt.ItemIsSelectable
                            self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                    # si no lo es pasamos al siguiente bloque
                    else:
                        # si el contador es igual a 9, entonces debemos verificar si el elemento es igual a 10 para pintarlo
                        # de verde a este y toda la fila
                        if c == 9:
                            if y == 100:
                                # añadimos un item en blanco
                                self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem())
                                # luego lo rellenamos con el valor del elemento
                                self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem(str(y)))
                                # coloreamos todas columnas de la fila hasta la columna con indice 9
                                for i in range(10):
                                    self.tabla_datos_alumnos.item(numRows - 1, i).setBackground(
                                        QtGui.QColor(191, 255, 0))
                                # se definen las banderas, es seleccionable pero no editable

                                flags = QtCore.Qt.ItemIsSelectable
                                self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                                # sumamos uno al contador
                                c = c + 1
                            # si el valor del elemento es diferente a 100 entonces no lo coloreamos solo añadimos el valor
                            # del elemento a la celda
                            elif y != 100:

                                self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem(str(y)))

                                flags = QtCore.Qt.ItemIsSelectable
                                self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                                # sumamos 1 al contador
                                c = c + 1
                        # si el contador no es 9, entonces añadimos el valor del elemento a un item de la tabla
                        else:
                            # se añade el elemento
                            self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem(str(y)))
                            # se definen las banderas, es seleccionable pero no editable
                            flags = QtCore.Qt.ItemIsSelectable
                            self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                            c = c + 1



    #metodo para guardar los datos
    def guardar(self):
        #variable global que servirá como switch para ver si podemos seguir realizando otras transacciones
        global editar
        #obtenemos los valores de los componentes
        matricula = self.ipt_matricula.text()
        matricula = int(matricula)
        nombre = self.ipt_name.text()
        paterno = self.ipt_ap_paterno.text()
        materno = self.ipt_ap_materno.text()
        edad = self.ipt_edad.text()
        edad = int(edad)
        carrera = self.combo_box_carrera.currentText()
        estado = self.combo_box_estado.currentText()
        municipio = self.combo_box_municipio.currentText()
        domicilio = self.ipt_domicilio.toPlainText()
        porcentaje = 20
        for i in self.rb_group.buttons():
            if i.isChecked():
                _porcentaje = i.text()
                porcentaje = int(_porcentaje)
        materias = ""
        materias_nombres = ""
        if self.cb_progra.isChecked():
            materias = materias + "1 "
            materias_nombres += self.cb_progra.text() + "|"
        if self.cb_bd.isChecked():
            materias = materias + "2 "
            materias_nombres += self.cb_bd.text() + "|"
        if self.cb_conta.isChecked():
            materias = materias + "3 "
            materias_nombres += self.cb_conta.text() + "|"
        if self.cb_io.isChecked():
            materias = materias + "4 "
            materias_nombres += self.cb_io.text() + "|"
        if self.cb_estadistica.isChecked():
            materias = materias + "5 "
            materias_nombres += self.cb_estadistica.text() + "|"
        if materias == "":
            materias = materias + "Ninguna Materia Favorita"

        #definimos una variable que servirá como condición, si esta en false no podemos avanzar, esto depende
        #del como esten introducidos lo datos, si no son correctos o faltan espacios se le dará el valor de false


        #se validarán aspectos como largo de la cadena, exceso de espacios, tipo de dato introducido.
        avanzar = False
        #variable para contar los espacios que hay en un dato introducido
        contador_espacios = 0
        #empiezan las validaciones
        if matricula != 0:
            avanzar=True
        else:
            msg = showMessage("Error", "La Matricula debe ser diferente a 0")
            self.ipt_matricula.setFocus()
            avanzar=False

        if avanzar:
            #borramos los espacios de la derecha
            nombre = nombre.rstrip()
            if len(nombre) > 0 and nombre.replace(" ", "").isalpha():
                if nombre[0] == " ":
                    msg = showMessage("Error", "Nombre no puede empezar con espacios.")
                    self.ipt_name.setFocus()
                    avanzar=False
                else:
                    for i in nombre:
                        if i == " ":
                            contador_espacios += 1
                            if contador_espacios > 1:
                                msg = showMessage("Error", "Nombre no debe tener tantos espacios seguidos.")
                                self.ipt_name.setFocus()
                                contador_espacios = 0
                                avanzar=False
                                break
                        else:
                            contador_espacios = 0
            else:
                msg = showMessage("Error", "Nombre no introducido o no válido.")
                self.ipt_name.setFocus()
                avanzar=False
        if avanzar:
            paterno = paterno.rstrip()
            if len(paterno) > 0 and paterno.replace(" ", "").isalpha():
                if paterno[0] == " ":
                    msg = showMessage("Error", "Apellido Paterno no puede empezar con espacios.")
                    self.ipt_ap_paterno.setFocus()
                    avanzar=False
                else:
                    for i in paterno:
                        if i == " ":
                            contador_espacios += 1
                            if contador_espacios > 1:
                                msg = showMessage("Error", "Apellido Paterno no debe tener tantos espacios seguidos.")
                                self.ipt_ap_paterno.setFocus()
                                contador_espacios = 0
                                avanzar=False
                                break
                        else:
                            contador_espacios = 0
            else:
                msg = showMessage("Error", "Apellido Paterno no introducido o no válido.")
                self.ipt_ap_paterno.setFocus()
                avanzar = False
        if avanzar:
            materno=materno.rstrip()
            if len(materno)>0:
                if materno.replace(" ","").isalpha():
                    if materno[0]==" ":
                        msg = showMessage("Error", "Apellido Materno no puede empezar con espacios.")
                        self.ipt_ap_materno.setFocus()
                        avanzar=False
                    else:
                        for i in materno:
                            if i == " ":
                                contador_espacios += 1
                                if contador_espacios > 1:
                                    msg = showMessage("Error","Apellido Materno no debe tener tantos espacios seguidos.")
                                    self.ipt_ap_materno.setFocus()
                                    contador_espacios = 0
                                    avanzar=False
                                    break
                            else:
                                contador_espacios = 0
                else:
                    msg = showMessage("Error", "Apellido Materno no introducido o no válido.")
                    self.ipt_ap_materno.setFocus()
                    avanzar = False
        if avanzar:
            if edad == 0:
                msg = showMessage("Error", "La edad del alumno no puede ser 0.")
                self.ipt_edad.setFocus()
                avanzar=False
        if avanzar:

            if estado == "ELIJA UN ESTADO":
                msg = showMessage("Error", "Debe de elegir un estado")
                self.combo_box_estado.setFocus()
                avanzar=False
        if avanzar:
            if municipio == "ELIJA UN MUNICIPIO":
                msg = showMessage("Error", "Debe de elegir un municipio.")
                self.combo_box_municipio.setFocus()
                avanzar=False
        if avanzar:
            domicilio = domicilio.rstrip()
            if len(domicilio)>0 and domicilio!= "CALLE Y NÚMERO":


                if not domicilio.replace(" ","").isdigit():
                    if domicilio[0] == " ":
                        msg = showMessage("Error", "Domicilio no puede empezar con espacios.")
                        self.ipt_domicilio.setFocus()
                        avanzar = False
                    else:
                        for i in domicilio:
                            if i == " ":
                                contador_espacios += 1
                                if contador_espacios > 1:
                                    msg = showMessage("Error","Domicilio no debe tener tantos espacios seguidos.")
                                    self.ipt_domicilio.setFocus()
                                    contador_espacios = 0
                                    avanzar=False
                                    break
                            else:
                                contador_espacios = 0




            else:
                msg = showMessage("Error", "Domicilio no introducido.")
                self.ipt_domicilio.setFocus()
                avanzar=False

        if avanzar:
            if carrera == "ELIJA UNA CARRERA":
                msg = showMessage("Error", "Debe de elegir una carrera")
                self.combo_box_carrera.setFocus()
                avanzar=False
        if avanzar:
            if porcentaje == 20:
                msg = showMessage("Error", "Debe de elegir un porcentaje")
                self.rb_0.setFocus()
                avanzar=False


        #si las validaciones fueron exitosas y no hay errores, procedemos a una ultima
        #la cual validará que no haya dos registros con la misma matrícula

        if avanzar:
            #conectamos con la base de datos
            db = conectar("alumnos")
            #definimos un cursor
            cursor = _cursor(db)
            #guardamos en una variable el valor que retorne el método consultar_matricula
            matricula_consultada = consultar_matricula(cursor, matricula)
            #nos desconectamos de la base de datos
            desconectar(db)
            #si la longitud del resultado es mayor a 0, entonces ya hay registros por lo que avanzar pasa a ser False
            if len(matricula_consultada) > 0:
                avanzar = False
                msg_mtr_repetida = showMessage("ERROR", "Ya hay un registro con esa matricula")
        #si todas las validaciones son exitosas procedemos a guardar los datos
        if avanzar:
            #cambiamos los valores a mayusculas
            nombre = nombre.upper()
            paterno = paterno.upper()
            materno = materno.upper()
            carrera = carrera.upper()
            estado = estado.upper()
            municipio = municipio.upper()
            domicilio = domicilio.upper()
            materias_nombres.upper()

            materias_texto = ""
            for i in materias_nombres:
                if i == "|":
                    materias_texto += "\n\t"
                else:
                    materias_texto += i

            if len(materias_texto) == 0:
                materias_texto = "Ninguna Materia Favorita."
            texto = f"Matricula:\n\t{matricula}.\n" \
                    f"Nombre:\n\t{nombre}.\n" \
                    f"Apellido Paterno:\n\t{paterno}.\n" \
                    f"Apellido Materno:\n\t{materno}.\n" \
                    f"Edad:\n\t{edad}.\n" \
                    f"Carrera:\n\t{carrera}.\n" \
                    f"Estado:\n\t{estado}.\n" \
                    f"Municipio:\n\t{municipio}.\n" \
                    f"Domicilio:\n\t{domicilio}\n" \
                    f"Porcentaje Beca:\n\t{porcentaje}%.\n" \
                    f"Materias Preferidas:\n\t{materias_texto}\n"
            #mostramos los datos introducidos en un message box y preguntamos si desea guardarlos
            _avanzar = showdialog("Guardar", f"¿Desea guardar los datos?\n\t{texto}")
            #si se escogió yes, entonces devuelve un valor de tipo int 1024 y procedemos a guardar
            if _avanzar == 1024:
                #conectamos con la base de datos
                db = conectar(bd)
                #definimos el cursor
                cursor = _cursor(db)
                #insertamos los valores
                insertar(db, cursor, matricula, nombre, paterno, materno, edad, carrera, estado, municipio, domicilio,
                         porcentaje, materias)
                #nos desconectamos de la base de datos
                desconectar(db)
                #aqui se define editar como False, osea cambiamos el valor, ya que sí se presionó editar, los datos se
                #pasan a los componentes para editarse y luego guardarse, por lo que ya esta libre el usuario de realizar
                #las transacciones que guste
                editar = False
                #limpiamos los componentes
                self.clean()
                #actualizamos la tabla
                self.actualizar()



    #método para actualizar la tabla
    def actualizar(self):
        #si no se ha presionado el boton de editar, entonces procedemos a actualizar la tabla
        if editar == False:
            #recorremos la tabla con ciclo for inverso
            for i in reversed(range(self.tabla_datos_alumnos.rowCount())):
                #por cada iteración, borramos la fila con indice del iterador
                self.tabla_datos_alumnos.removeRow(i)
            #despues de haber borrado todas las filas, la rellenamos de nuevo
            self.fill_table()
        else:
            #mandamos mensaje de error si es que tiene una operacion de actualización pendiente.
            msg = showMessage("Error", "Tiene una operacion de actualización pendiente.")

    #metodo para editar registros
    def editar(self):

        global editar
        #si no hay una operación de tipo editar pendiente entonces
        if editar == False:
            #editar ahora es True, por lo que restringe de cualquier otra opción al usuario
            editar = True
            try:
                #obtenemos el indice de la fila seleecionada
                index = self.tabla_datos_alumnos.currentRow()
                #obtenemos la matricula del registro en base a su indice
                matricula = self.tabla_datos_alumnos.item(index, 0).text()
                #mensaje de confiarmación
                _editar = showdialog(f"Editar", f"¿Desea editar al alumno con matricula {matricula}?")
                #si si quiere
                if _editar == 1024:
                    #conectamos a la base de datos
                    db = conectar("alumnos")
                    #definimos un cursor
                    cursor = _cursor(db)
                    #eliminamos al alumno
                    eliminar_alumno(db, cursor, matricula)
                    #nos desoconectamos
                    desconectar(db)
                    #definimos una lista donde se guardaran los datos del alumno en base al registro en la tabla
                    datos = list()
                    #recorremos las columnas de las filas
                    for i in range(11):
                        #si es 10 entonces
                        if i == 10:
                            #intentamos crear un combo box por si los datos de la celda estan en un combo box
                            try:
                                cb = self.tabla_datos_alumnos.cellWidget(index, i)
                                #guardamos los datos en una lista
                                all_items = [cb.itemText(z) for z in range(cb.count())]
                                #los añadimos a datos[]
                                datos.append(all_items)
                            #si hay algun error quiere decir que no es un combo box por lo que se obtiene el valor
                            #directamente de la celda
                            except:
                                datos.append(self.tabla_datos_alumnos.item(index, i).text())
                        #si no lo es se obtiene el valor directamente y se guarda directamente en la lista
                        else:
                            #guardamos el valor de la columna en la lista datos
                            datos.append(self.tabla_datos_alumnos.item(index, i).text())

                    #print(datos)
                    #setteamos el texto el valor de los componentes en base a lista datos[]
                    self.ipt_matricula.setValue(int(datos[0]))
                    self.ipt_name.setText(datos[1])
                    self.ipt_ap_paterno.setText(datos[2])
                    self.ipt_ap_materno.setText(datos[3])
                    self.ipt_edad.setValue(int(datos[4]))
                    self.combo_box_carrera.setCurrentText(datos[5])
                    self.combo_box_estado.setCurrentText(datos[6])
                    self.municipios()
                    self.ipt_domicilio.setText(datos[8])
                    for i in self.rb_group.buttons():
                        if i.text() == datos[9]:
                            i.setChecked(True)
                    for i in datos[10]:
                        i = i.upper()
                        if self.cb_progra.text() == i:
                            self.cb_progra.setChecked(True)
                        if self.cb_bd.text() == i:
                            self.cb_bd.setChecked(True)
                        if self.cb_conta.text() == i:
                            self.cb_conta.setChecked(True)
                        if self.cb_estadistica.text() == i:
                            self.cb_estadistica.setChecked(True)
                        if self.cb_io.text() == i:
                            self.cb_io.setChecked(True)
                    self.combo_box_municipio.setCurrentText(datos[7])
                #si no quiere reinicializamos la variable editar
                else:
                    editar=False
                    index=None

            except:
                #si hay algun error, el mas seguro es que sea porque no hay registros en la tabla
                texto = "Nada que actualizar o no ha elegido nada."
                #mandamos mensaje
                _error = showMessage("Error", texto)
                #la variable editar ahora es False ya que no hay nada que editar


        #si es True entonces hay una operación de edición pendiente
        else:
            msg = showMessage("Error","Tiene una operacion de actualización pendiente.")

    #metodo para eliminar registros
    def eliminar(self):

        global editar
        #si no hay actualizaciones pendientes
        if editar == False:
            #intentamos obtener el numero de la fila seleccionada
            try:
                index = self.tabla_datos_alumnos.currentRow()
                #en base al indice obtenemos el valor de la columna matricula
                matricula = self.tabla_datos_alumnos.item(index, 0).text()
                #mandamos un mensaje de confirmación
                borrar = showdialog(f"Eliminar", f"¿Desea eliminar al alumno con matricula {matricula}?")
                #si es correcto
                if borrar == 1024:
                    #nos conectamos a la base de datos
                    db = conectar(bd)
                    #definimos un cursor
                    cursor = _cursor(db)
                    #eliminamos al alumno con ayuda de la función eliminar alumno
                    eliminar_alumno(db, cursor, matricula)
                    #nos desconectamos de la base de datos
                    desconectar(db)
                    # si todo se ejecuta bie entonces actualizamos la tabla
                    self.actualizar()
                    # mandamos mensaje de exito
                    mensaje = "SE HA ELIMINADO EL REGISTRO CORRECTAMENTE."
                    _done = showMessage("HECHO", f"{mensaje}")

            except:
                #si ocurre algún error, el más común es que no haya registros, entonces manda mensaje siguiente.
                texto = "Nada que eliminar. Asegurese que haya registros al menos. O haya seleccionado alguno de ellos."
                _error = showMessage("Error", texto)


        #si editar es True entonces mandamos mensaje de error
        else:

            msg = showMessage("Error","Tiene una operacion de actualización pendiente.")

    #metodo para consultar registros
    def consultar(self):
        global editar
        #si no hay operaciones de editar pendiente entonces
        if editar == False:
            #conectamos a la base de datos
            db = conectar(bd)
            #definimos un cursor
            cursor = _cursor(db)
            #obtenemos la matricula ingresada por el usuario
            matricula = self.ipt_search_matricula.text()
            alumno = consultar_matricula(cursor, matricula)


            desconectar(db)
            #si hay algun registro con esa matricula entonces la longitud de la variable alumno será mayor a 0
            if alumno != None:

                if len(alumno) > 0:
                    # limpiamos la tabla
                    for i in reversed(range(self.tabla_datos_alumnos.rowCount())):
                        self.tabla_datos_alumnos.removeRow(i)
                    # guardamos en una variable la posición de la fila en base a las filas
                    rowPosition = self.tabla_datos_alumnos.rowCount()
                    # insertamos una fila en base a la variable anterior
                    self.tabla_datos_alumnos.insertRow(rowPosition)
                    # obtenemos el numero de columnas
                    numCols = self.tabla_datos_alumnos.columnCount()
                    # obtenemos el numero de filas
                    numRows = self.tabla_datos_alumnos.rowCount()
                    # definimos el numero de filas
                    self.tabla_datos_alumnos.setRowCount(numRows)
                    # definimos el numero de columnas
                    self.tabla_datos_alumnos.setColumnCount(numCols)
                    # definimos una variable contadora
                    c = 0
                    # recorremos cada valor del elemento actual
                    for y in alumno:
                        # recorremos cada valor del elemento del elemento
                        for z in y:
                            if c == 10:
                                # si el valor del elemento es diferente a la condición entonces
                                if z != "Ninguna Materia Favorita":
                                    # se crea un combo box
                                    combo_box = QtWidgets.QComboBox()
                                    # instanciamos una variable
                                    materia = ""
                                    # recorremos el elemento, dependiendo el valor que tenga el elemento, se añade un valor al
                                    # combo box
                                    for numero in z:
                                        if numero.strip() == "1":
                                            materia = "PROGRAMACION"
                                            combo_box.addItem(materia)
                                        elif numero.strip() == "2":
                                            materia = "BASE DE DATOS"
                                            combo_box.addItem(materia)
                                        elif numero.strip() == "3":
                                            materia = "CONTABILIDAD"
                                            combo_box.addItem(materia)
                                        elif numero.strip() == "4":
                                            materia = "INVESTIGACION DE OPERACIONES"
                                            combo_box.addItem(materia)
                                        elif numero.strip() == "5":
                                            materia = "ESTADISTICA"
                                            combo_box.addItem(materia)
                                    # añadimos el combobox a la celda especificada
                                    self.tabla_datos_alumnos.setCellWidget(numRows - 1, c, combo_box)
                                # si no lo es

                                else:
                                    # añadimos un item en blanco
                                    self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem())
                                    # lo rellenamos
                                    self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem(str(z)))
                                    # en caso que la celda anterior sea igual a 100, coloreamos esta celda de verde
                                    if self.tabla_datos_alumnos.item(numRows - 1, 9).text() == "100":
                                        self.tabla_datos_alumnos.item(numRows - 1, c).setBackground(
                                            QtGui.QColor(191, 255, 0))
                                    # se definen las banderas, es seleccionable pero no editable
                                    flags = QtCore.Qt.ItemIsSelectable
                                    self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                            # si no lo es pasamos al siguiente bloque

                            else:
                                # si el contador es igual a 9, entonces debemos verificar si el elemento es igual a 10 para pintarlo
                                # de verde a este y toda la fila
                                if c == 9:
                                    if z == 100:
                                        # añadimos un item en blanco
                                        self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem())
                                        # luego lo rellenamos con el valor del elemento
                                        self.tabla_datos_alumnos.setItem(numRows - 1, c,
                                                                         QtWidgets.QTableWidgetItem(str(z)))
                                        # coloreamos todas columnas de la fila hasta la columna con indice 9
                                        for t in range(10):
                                            self.tabla_datos_alumnos.item(numRows - 1, t).setBackground(
                                                QtGui.QColor(191, 255, 0))

                                        flags = QtCore.Qt.ItemIsSelectable
                                        self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                                        c = c + 1
                                    elif z != 100:
                                        # si el valor del elemento es diferente a 100 entonces no lo coloreamos solo añadimos el valor
                                        # del elemento a la celda
                                        self.tabla_datos_alumnos.setItem(numRows - 1, c,
                                                                         QtWidgets.QTableWidgetItem(str(z)))
                                        # se definen las banderas, es seleccionable pero no editable
                                        flags = QtCore.Qt.ItemIsSelectable
                                        self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                                        # sumamos uno al contador
                                        c = c + 1
                                else:
                                    # si el contador no es 9, entonces añadimos el valor del elemento a un item de la tabla
                                    # se añade el elemento
                                    self.tabla_datos_alumnos.setItem(numRows - 1, c, QtWidgets.QTableWidgetItem(str(z)))
                                    # se definen las banderas, es seleccionable pero no editable
                                    flags = QtCore.Qt.ItemIsSelectable
                                    self.tabla_datos_alumnos.item(numRows - 1, c).setFlags(flags)
                                    c = c + 1
                else:
                    msg = showMessage("Done", "No hay ningún alumno registrado con la matrícula ingresada.")

                # si no es mayor a 0 entonces no hay registros con esa matricula


        else:
            msg = showMessage("Error", "Tiene una operacion de actualización pendiente.")
            # reseteamos el valor actual del componente a 0
            self.ipt_search_matricula.setValue(0)
            # ponemos el cursor ahi
            self.ipt_search_matricula.setFocus()


    #metodo para exportar la tabla a pd
    def exportar_pdf(self):
        #almaceamos el numero de filas
        num_filas = self.tabla_datos_alumnos.rowCount()
        #si es mayor a 0 exportamos, si no pues manda mensaje de de advertencia
        if num_filas > 0:
            # opciones de la ventana de dialogo
            options = QFileDialog.Options()
            # variable que guardara el nombre del archivo
            archivo = \
                QFileDialog.getSaveFileName(None, "Select destination folder and file name", "", "PDF files (*.pdf)",
                                            options=options)[0]
            # si se guardo el archivo entonces archivo debe ser mayor a 0, si es asi se entra al bloque de código

            if len(archivo) > 0:

                # se ordenan los items de la tabla en base a la columna 5, que es la carrera, en orden ascendente
                self.tabla_datos_alumnos.sortItems(5, QtCore.Qt.AscendingOrder)
                # se definen 4 listas para las 4 carrera, en ellas se almacenaran los indices de los registros
                matriculas_lti = []
                matriculas_cp = []
                matriculas_lni = []
                matriculas_lae = []
                # recorremos la tabla, en base a la columna 5 se almacena el indice del registro
                for i in range(num_filas):
                    if self.tabla_datos_alumnos.item(i, 5).text() == "LIC. EN TECNOLOGÍAS DE INFORMACIÓN":
                        matriculas_lti.append(i)
                    elif self.tabla_datos_alumnos.item(i, 5).text() == "LIC. EN ADMINISTRACIÓN DE EMPRESAS":
                        matriculas_lae.append(i)
                    elif self.tabla_datos_alumnos.item(i, 5).text() == "LIC. EN NEGOCIOS INTERNACIONALES":
                        matriculas_lni.append(i)
                    elif self.tabla_datos_alumnos.item(i, 5).text() == "CONTADOR PÚBLICO Y AUDITOR":
                        matriculas_cp.append(i)
                # creamos un modelo de la tabla
                model = self.tabla_datos_alumnos.model()
                # Las siguientes lineas de codigo crean el archivo
                # instanciamos un objeto de la clase QPrinter
                printer = QtPrintSupport.QPrinter(QtPrintSupport.QPrinter.PrinterResolution)
                # Le damos formato PDF
                printer.setOutputFormat(QtPrintSupport.QPrinter.PdfFormat)
                # definimos el tamaño
                printer.setPaperSize(QtPrintSupport.QPrinter.A4)
                # la orientacion de la página
                printer.setOrientation(QtPrintSupport.QPrinter.Landscape)
                # le damos nombre
                printer.setOutputFileName(archivo)
                # creamos un documento que tendra una estructura html
                doc = QtGui.QTextDocument()
                # definimos la variable html para ir almacenando el codigo html
                html = """<html>
                                        <head>
                                        <style>
                                        table th{
                                          border: 0.5px solid black;
                                          border-collapse: collapse;
                                          background-color: black;
                                          color:white;
                                        }
                                        table td {
                                          font-size:7.5px;  
                                          text-align:center;  
                                          border: 1px solid black;

                                        }
                                        </style>
                                        </head>"""
                html += "<h1>Listas de Alumnos</h1><br/>"
                # de la linea 1745 a la 18no se que, se estará evaluando si las listas tienen elementos, de ser así, procederemos
                # a introducir codigo html de la tabla, a definir encabezados y sus filas
                if len(matriculas_lti) > 0:
                    html += "<h2>LICENCIADO EN TECNOLOGÍAS DE INFORMACIÓN</h2>"
                    html += "<table><thead>"
                    html += "<tr>"
                    for c in range(model.columnCount()):
                        html += "<th>{}</th>".format(model.headerData(c, QtCore.Qt.Horizontal))
                    html += "</tr></thead>"
                    html += "<tbody>"
                    for r in matriculas_lti:
                        html += "<tr>"
                        for c in range(model.columnCount()):
                            if c == 10:
                                try:
                                    cb = self.tabla_datos_alumnos.cellWidget(r, c)
                                    all_items = [cb.itemText(z) for z in range(cb.count())]
                                    materias = ""
                                    for i in all_items:
                                        materias += i + "<br>"
                                    html += "<td>{}</td>".format(materias or "")
                                except:
                                    html += "<td>{}</td>".format(model.index(r, c).data() or "")
                            else:
                                html += "<td>{}</td>".format(model.index(r, c).data() or "")
                        html += "</tr>"
                    html += "</tbody></table>"
                if len(matriculas_cp) > 0:
                    html += "<h2>CONTADOR PÚBLICO Y AUDITOR</h2>"
                    html += "<table><thead>"
                    html += "<tr>"
                    for c in range(model.columnCount()):
                        html += "<th>{}</th>".format(model.headerData(c, QtCore.Qt.Horizontal))
                    html += "</tr></thead>"
                    html += "<tbody>"
                    for r in matriculas_cp:
                        html += "<tr>"
                        for c in range(model.columnCount()):
                            if c == 10:
                                try:
                                    cb = self.tabla_datos_alumnos.cellWidget(r, c)
                                    all_items = [cb.itemText(z) for z in range(cb.count())]
                                    materias = ""
                                    for i in all_items:
                                        materias += i + "<br>"
                                    html += "<td>{}</td>".format(materias or "")
                                except:
                                    html += "<td>{}</td>".format(model.index(r, c).data() or "")
                            else:
                                html += "<td>{}</td>".format(model.index(r, c).data() or "")
                        html += "</tr>"
                    html += "</tbody></table>"
                if len(matriculas_lae) > 0:
                    html += "<h2>LICENCIADO EN ADMINISTRACIÓN DE EMPRESAS</h2>"
                    html += "<table><thead>"
                    html += "<tr>"
                    for c in range(model.columnCount()):
                        html += "<th>{}</th>".format(model.headerData(c, QtCore.Qt.Horizontal))
                    html += "</tr></thead>"
                    html += "<tbody>"
                    for r in matriculas_lae:
                        html += "<tr>"
                        for c in range(model.columnCount()):
                            if c == 10:
                                try:
                                    cb = self.tabla_datos_alumnos.cellWidget(r, c)
                                    all_items = [cb.itemText(z) for z in range(cb.count())]
                                    materias = ""
                                    for i in all_items:
                                        materias += i + "<br>"
                                    html += "<td>{}</td>".format(materias or "")
                                except:
                                    html += "<td>{}</td>".format(model.index(r, c).data() or "")
                            else:
                                html += "<td>{}</td>".format(model.index(r, c).data() or "")
                        html += "</tr>"
                    html += "</tbody></table>"
                if len(matriculas_lni) > 0:
                    html += "<h2>LICENCIADO EN NEGOCIOS INTERNACIONALES</h2>"
                    html += "<table><thead>"
                    html += "<tr>"
                    for c in range(model.columnCount()):
                        html += "<th>{}</th>".format(model.headerData(c, QtCore.Qt.Horizontal))
                    html += "</tr></thead>"
                    html += "<tbody>"
                    for r in matriculas_lni:
                        html += "<tr>"
                        for c in range(model.columnCount()):
                            if c == 10:
                                try:
                                    cb = self.tabla_datos_alumnos.cellWidget(r, c)
                                    all_items = [cb.itemText(z) for z in range(cb.count())]
                                    materias = ""
                                    for i in all_items:
                                        materias += i + "<br>"
                                    html += "<td>{}</td>".format(materias or "")
                                except:
                                    html += "<td>{}</td>".format(model.index(r, c).data() or "")
                            else:
                                html += "<td>{}</td>".format(model.index(r, c).data() or "")
                        html += "</tr>"
                    html += "</tbody></table>"
                # se le añade el codigo html al documento
                doc.setHtml(html)
                # definimos el tamaño del documento
                doc.setPageSize(QtCore.QSizeF(printer.pageRect().size()))
                # imprimimos el documento en el archivo
                doc.print_(printer)
                # actualizamos la tabla para quitar el orden por carreras
                self.actualizar()
                # arrojamos mensaje de exito, y por si quiere abrir el archivo el usuario
                msg = showdialog("Hecho.", "SE HA EXPORTADO CORRECTAMENTE EL ARCHIVO.\n¿DESEA ABRIRLO?.")
                if msg == 1024:
                    # si dice que si, se hace uso de la libreria subprocess el metodo Popen para abrir el archivo.
                    subprocess.Popen([archivo], shell=True)
        else:
            showMessage("Warning","Nada que exportar.")



    # Método para limpiar los campos, se hace uso de las funciones setText() para campos de texto, setCurrentIndex() y clear()
    # para combobox, set Checked para componentes Radio y Check Box, y setValue para SpinBoxes
    def clean(self):

        self.ipt_name.setText("")
        self.ipt_ap_paterno.setText("")
        self.ipt_ap_materno.setText("")
        self.ipt_matricula.setValue(0)
        self.ipt_edad.setValue(0)
        self.ipt_domicilio.setText("CALLE Y NÚMERO")
        self.combo_box_carrera.setCurrentIndex(0)
        self.combo_box_estado.setCurrentIndex(0)
        self.combo_box_municipio.clear()
        self.combo_box_municipio.addItem("ELIJA UN MUNICIPIO")
        self.rb_0.setChecked(True)
        self.cb_progra.setChecked(False)
        self.cb_conta.setChecked(False)
        self.cb_estadistica.setChecked(False)
        self.cb_bd.setChecked(False)
        self.cb_io.setChecked(False)
        #ponemos puntero en el campo matricula despues de limpiar los campos
        self.ipt_matricula.setFocus()